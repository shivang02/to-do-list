{"version":3,"sources":["logo.svg","components/Header.js","components/List.js","components/InputBox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","List","props","type","this","value","React","Component","InputBox","ClickHandler","str","document","getElementById","setState","ItemVal","state","concat","EnterCheck","e","key","bind","listItems","map","listVal","index","placeholder","id","onKeyDown","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8JAAAA,EAAOC,QAAU,IAA0B,kC,4GCS5BC,MAPf,WACI,OACI,yBAAKC,UAAU,eACX,4C,mCCcGC,E,kDAhBX,WAAYC,GAAO,uCACTA,G,qDAGN,OACI,yBAAKF,UAAU,aACX,6BACI,2BAAOG,KAAK,cAEhB,6BACI,2BAAIC,KAAKF,MAAMG,a,GAXhBC,IAAMC,WC4CVC,E,kDA1CX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IASVO,aAAe,WACX,IAAMC,EAAIC,SAASC,eAAe,aAAaP,MAC/C,EAAKQ,SAAS,CAACC,QAAQ,EAAKC,MAAMD,QAAQE,OAAON,KACjDC,SAASC,eAAe,aAAaP,MAAM,IAb7B,EAgBlBY,WAAa,SAACC,GACC,SAARA,EAAEC,KACD,EAAKV,gBAhBT,EAAKM,MAAO,CACRD,QAAU,IAEd,EAAKL,aAAe,EAAKA,aAAaW,KAAlB,gBACpB,EAAKH,WAAW,EAAKA,WAAWG,KAAhB,gBANF,E,qDAsBR,IAAD,OAECC,EAAYjB,KAAKW,MAAMD,QAAQQ,KAAI,SAACC,EAAQC,GAC9C,OACI,kBAAC,EAAD,CAAMnB,MAAOkB,OAGrB,OACI,6BACA,yBAAKvB,UAAU,mBACf,2BAAOA,UAAU,aAAayB,YAAY,kBAAkBC,GAAG,YAAYC,UAAWvB,KAAKa,aACvF,4BAAQd,KAAK,SAASuB,GAAG,gBAAgB1B,UAAU,qBAAqB4B,QAAS,kBAAK,EAAKnB,iBAA3F,aAEJ,yBAAKT,UAAU,aACVqB,Q,GArCMf,IAAMC,WCiBdsB,MAXf,WACE,OACE,yBAAK7B,UAAU,OACf,yBAAKA,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCFc8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1B,SAASC,eAAe,SDyHpB,kBAAmB0B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8a3c6fb4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from \"react\"\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"header-main\">\r\n            <h1>To-Do List</h1>\r\n        </div>\r\n    )\r\n}\r\nexport default Header","import React from \"react\"\r\n\r\nclass List extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n    } \r\n    render() {\r\n        return (\r\n            <div className=\"list-item\">\r\n                <div>\r\n                    <input type=\"checkbox\" />\r\n                </div>\r\n                <div>\r\n                    <p>{this.props.value}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default List","import React from \"react\"\r\nimport List from './List'\r\n\r\nclass InputBox extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            ItemVal : []\r\n        }\r\n        this.ClickHandler = this.ClickHandler.bind(this);\r\n        this.EnterCheck=this.EnterCheck.bind(this);\r\n    }\r\n    \r\n    \r\n    ClickHandler = () => {\r\n        const str=document.getElementById(\"input-box\").value;\r\n        this.setState({ItemVal:this.state.ItemVal.concat(str)});\r\n        document.getElementById(\"input-box\").value=\"\";\r\n    };\r\n\r\n    EnterCheck = (e)=>{\r\n        if(e.key== 'Enter'){\r\n            this.ClickHandler();\r\n        }    \r\n    }\r\n    \r\n    render() {\r\n        \r\n        const listItems = this.state.ItemVal.map((listVal,index) =>{\r\n            return (\r\n                <List value={listVal} />\r\n            );\r\n        })\r\n        return (\r\n            <div>\r\n            <div className=\"input-container\">\r\n            <input className=\"list-input\" placeholder=\"Enter List Item\" id=\"input-box\" onKeyDown={this.EnterCheck}></input>\r\n                <button type=\"submit\" id=\"submit-button\" className=\"list-submit-button\" onClick={() =>this.ClickHandler()}>Add Note</button>\r\n            </div>\r\n            <div className=\"full-list\">\r\n                {listItems}\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default InputBox ","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Header from './components/Header'\r\n\r\nimport InputBox from './components/InputBox'\r\nimport ClickHandler from './components/InputBox'\r\nimport ItemVal from './components/InputBox'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n    <div className=\"inner-app\">\r\n      <Header />\r\n      <InputBox />\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}