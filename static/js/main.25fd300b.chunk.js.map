{"version":3,"sources":["logo.svg","components/Header.js","components/List.js","components/InputBox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","List","props","type","this","value","React","Component","InputBox","ClickHandler","str","document","getElementById","setState","ItemVal","state","concat","EnterCheck","e","key","bind","listItems","map","listVal","index","placeholder","id","onKeyDown","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8JAAAA,EAAOC,QAAU,IAA0B,kC,4GCS5BC,MAPf,WACI,OACI,yBAAKC,UAAU,eACX,4C,mCCcGC,E,kDAhBX,WAAYC,GAAO,uCACTA,G,qDAGN,OACI,yBAAKF,UAAU,aACX,6BACI,2BAAOG,KAAK,cAEhB,6BACKC,KAAKF,MAAMG,Y,GAXbC,IAAMC,WC4CVC,E,kDA1CX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IASVO,aAAe,WACX,IAAMC,EAAIC,SAASC,eAAe,aAAaP,MAC/C,EAAKQ,SAAS,CAACC,QAAQ,EAAKC,MAAMD,QAAQE,OAAON,KACjDC,SAASC,eAAe,aAAaP,MAAM,IAb7B,EAgBlBY,WAAa,SAACC,GACC,SAARA,EAAEC,KACD,EAAKV,gBAhBT,EAAKM,MAAO,CACRD,QAAU,IAEd,EAAKL,aAAe,EAAKA,aAAaW,KAAlB,gBACpB,EAAKH,WAAW,EAAKA,WAAWG,KAAhB,gBANF,E,qDAsBR,IAAD,OAECC,EAAYjB,KAAKW,MAAMD,QAAQQ,KAAI,SAACC,EAAQC,GAC9C,OACI,kBAAC,EAAD,CAAMnB,MAAOkB,OAGrB,OACI,6BACA,yBAAKvB,UAAU,mBACf,2BAAOA,UAAU,aAAayB,YAAY,kBAAkBC,GAAG,YAAYC,UAAWvB,KAAKa,aACvF,4BAAQd,KAAK,SAASuB,GAAG,gBAAgB1B,UAAU,qBAAqB4B,QAAS,kBAAK,EAAKnB,iBAA3F,aAEJ,yBAAKT,UAAU,aACVqB,Q,GArCMf,IAAMC,WCiBdsB,MAXf,WACE,OACE,yBAAK7B,UAAU,OACf,yBAAKA,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCFc8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1B,SAASC,eAAe,SDyHpB,kBAAmB0B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.25fd300b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\"\n\nfunction Header() {\n    return (\n        <div className=\"header-main\">\n            <h1>To-Do List</h1>\n        </div>\n    )\n}\nexport default Header","import React from \"react\"\n\nclass List extends React.Component {\n    constructor(props){\n        super(props);\n    } \n    render() {\n        return (\n            <div className=\"list-item\">\n                <div>\n                    <input type=\"checkbox\" />\n                </div>\n                <div>\n                    {this.props.value}\n                </div>\n            </div>\n        );\n    }\n}\nexport default List","import React from \"react\"\nimport List from './List'\n\nclass InputBox extends React.Component {\n    constructor(props){\n        super(props);\n        this.state ={\n            ItemVal : []\n        }\n        this.ClickHandler = this.ClickHandler.bind(this);\n        this.EnterCheck=this.EnterCheck.bind(this);\n    }\n    \n    \n    ClickHandler = () => {\n        const str=document.getElementById(\"input-box\").value;\n        this.setState({ItemVal:this.state.ItemVal.concat(str)});\n        document.getElementById(\"input-box\").value=\"\";\n    };\n\n    EnterCheck = (e)=>{\n        if(e.key== 'Enter'){\n            this.ClickHandler();\n        }    \n    }\n    \n    render() {\n        \n        const listItems = this.state.ItemVal.map((listVal,index) =>{\n            return (\n                <List value={listVal} />\n            );\n        })\n        return (\n            <div>\n            <div className=\"input-container\">\n            <input className=\"list-input\" placeholder=\"Enter List Item\" id=\"input-box\" onKeyDown={this.EnterCheck}></input>\n                <button type=\"submit\" id=\"submit-button\" className=\"list-submit-button\" onClick={() =>this.ClickHandler()}>Add Note</button>\n            </div>\n            <div className=\"full-list\">\n                {listItems}\n            </div>\n        </div>\n        )\n    }\n}\nexport default InputBox ","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header'\n\nimport InputBox from './components/InputBox'\nimport ClickHandler from './components/InputBox'\nimport ItemVal from './components/InputBox'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <div className=\"inner-app\">\n      <Header />\n      <InputBox />\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}